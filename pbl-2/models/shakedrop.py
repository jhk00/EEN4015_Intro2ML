{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c93584dd-1248-4ceb-a5af-dcb1cd86d5a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "class ShakeDrop(nn.Module):\n",
    "    \"\"\"\n",
    "    ShakeDrop Regularization 구현\n",
    "    https://arxiv.org/abs/1802.02375\n",
    "    \"\"\"\n",
    "    def __init__(self, p_drop=0.5, alpha_range=[-1, 1], beta_range=[0, 1]):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            p_drop: 드롭 확률 (0~1)\n",
    "            alpha_range: 알파 범위 [min, max]\n",
    "            beta_range: 베타 범위 [min, max]\n",
    "        \"\"\"\n",
    "        super(ShakeDrop, self).__init__()\n",
    "        self.p_drop = p_drop\n",
    "        self.alpha_range = alpha_range\n",
    "        self.beta_range = beta_range\n",
    "        \n",
    "    def forward(self, x):\n",
    "        if not self.training:\n",
    "            return x\n",
    "        \n",
    "        batch_size = x.size()[0]\n",
    "        \n",
    "        # 각 샘플에 대한 바이너리 마스크 생성 (1-p_drop 확률로 1, p_drop 확률로 0)\n",
    "        mask = torch.FloatTensor(batch_size, 1, 1, 1).bernoulli_(1 - self.p_drop).to(x.device)\n",
    "        \n",
    "        # 학습 중일 때 무작위 알파와 베타 생성\n",
    "        alpha = torch.rand(batch_size, 1, 1, 1).to(x.device) * (self.alpha_range[1] - self.alpha_range[0]) + self.alpha_range[0]\n",
    "        beta = torch.rand(batch_size, 1, 1, 1).to(x.device) * (self.beta_range[1] - self.beta_range[0]) + self.beta_range[0]\n",
    "        \n",
    "        # ShakeDrop 적용: (1-마스크) * 알파 + 마스크 * 베타\n",
    "        # 마스크가 1일 때는 x * 베타, 마스크가 0일 때는 x * 알파\n",
    "        out = x * (mask + alpha * (1 - mask))\n",
    "        \n",
    "        return out\n",
    "\n",
    "def apply_shakedrop_to_module(module, p_drop=0.5, alpha_range=[-1, 1], beta_range=[0, 1]):\n",
    "    \"\"\"\n",
    "    PyramidNet이나 ResNet 모델에 ShakeDrop 적용하는 헬퍼 함수\n",
    "    이 함수는 모델의 각 잔차 블록 끝에 ShakeDrop 추가\n",
    "    \n",
    "    Args:\n",
    "        module: 적용할 모듈 (일반적으로 네트워크 모델)\n",
    "        p_drop: 드롭 확률\n",
    "        alpha_range: 알파 범위\n",
    "        beta_range: 베타 범위\n",
    "    \"\"\"\n",
    "    for name, child in module.named_children():\n",
    "        if isinstance(child, nn.Sequential) and 'stage' in name:\n",
    "            # 각 스테이지의 블록 수에 따라 p_drop을 조정\n",
    "            total_blocks = len(list(child.children()))\n",
    "            for i, block in enumerate(child.children()):\n",
    "                # 선형적으로 증가하는 p_drop 적용 (블록이 깊어질수록 높은 p_drop)\n",
    "                block_p_drop = p_drop * (i + 1) / total_blocks\n",
    "                # 블록의 종료 부분에 ShakeDrop 추가\n",
    "                if hasattr(block, 'add_module'):\n",
    "                    block.add_module('shakedrop', ShakeDrop(block_p_drop, alpha_range, beta_range))\n",
    "        else:\n",
    "            # 재귀적으로 하위 모듈에 적용\n",
    "            apply_shakedrop_to_module(child, p_drop, alpha_range, beta_range)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
